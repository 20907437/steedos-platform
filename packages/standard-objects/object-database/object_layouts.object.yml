name: object_layouts
label: Object Layouts
icon: dashboard_ea
hidden: false
fields:
  name:
    type: text
    required: true
    label: Api Name
    is_wide: true
    is_name: true
  label:
    type: text
    required: true
    label: Label
    is_wide: true
    is_name: true
  object_name:
    label: Object
    type: master_detail
    required: true
    reference_to: objects
    reference_to_field: name
    write_requires_master_read: true
    optionsFunction: !<tag:yaml.org,2002:js/function> |-
      function () {
              var _options = [];
              _.forEach(Creator.objectsByName, function (o, k) {
                return _options.push({
                  label: o.label,
                  value: k,
                  icon: o.icon
                });
              });
              return _options;
            }
  type:
    type: select
    options:
      - label: Record
        value: record
      - label: Page
        value: page
    defaultValue: record
    hidden: true
    required: true
  profiles:
    type: lookup
    label: Profile
    showIcon: false
    multiple: true
    required: true
    create: false
    optionsFunction: !<tag:yaml.org,2002:js/function> |-
      function () {
        var profiles = Creator.odata.query('permission_set', {$filter: "(type eq 'profile')"}, true);
        var result = [];
        profiles.forEach(function (item) {
          result.push({
            label: item.label,
            value: item.name
          });
        });
        return result;
      }
  buttons:
    type: grid
    blackbox: true
    is_wide: true
  buttons.$.button_name:
    type: lookup
    depend_on:
      - object_name
    optionsFunction: !<tag:yaml.org,2002:js/function> |-
      function (values) {
        if (!(values != null ? values.object_name : void 0)) {
          values.object_name = Session.get("object_name");
        }
        if(values.object_name && !_.isString(values.object_name)){
          values.object_name = values.object_name.name
        }
        const options = [];
        if(values){
          var actions = Creator.getObject(values.object_name).actions;
          _.each(actions, function(action){
            options.push({label: action.label, value: action.name})
          })
        }
        return options;
      }
  buttons.$.visible_on:
    label: Visible on
    type: textarea
  fields:
    type: grid
    is_wide: true
    required: true
  fields.$:
    label: Field
    blackbox: true
    type: object
  fields.$.field_name:
    label: Field
    type: lookup
    multiple: false
    is_wide: false
    required: true
    depend_on:
      - object_name
    optionsFunction: !<tag:yaml.org,2002:js/function> |-
      function (values) {
              if (!(values != null ? values.object_name : void 0)) {
                values.object_name = Session.get("object_name");
              }
              if(values.object_name && !_.isString(values.object_name)){
                values.object_name = values.object_name.name
              }
              return Creator.getObjectFieldOptions(values != null ? values.object_name : void 0, true);
            }
  fields.$.is_readonly:
    label: Readonly
    type: boolean
  fields.$.is_required:
    label: Required
    type: boolean
  fields.$.group:
    label: Group
    type: text
  fields.$.visible_on:
    label: Visible on
    type: textarea 
  related_lists:
    type: grid
    blackbox: true
    is_wide: true
  related_lists.$.related_field_fullname:
    type: lookup
    depend_on:
      - object_name
    optionsFunction: !!js/function |
      function(values) {
        if (!(values != null ? values.object_name : void 0)) {
          values.object_name = Session.get("object_name");
        }
        if(values.object_name && !_.isString(values.object_name)){
          values.object_name = values.object_name.name
        }
        const options = [];
        const object = Creator.getObject(values.object_name);
        const relatedList = _.union(object.details, object.lookup_details);
        _.each(relatedList, function(related){
          options.push({label: related, value: related})
        })
        return options;
      }
  related_lists.$.field_names:
    type: lookup
    reference_to: object_fields
    create: false
    multiple: true
    depend_on:
      - object_name
      - related_lists.$.related_field_fullname
    optionsFunction: !!js/function |
      function(values) {
        if(!this.template){return [];}
        const formFieldName = this.template.data.name;
        const foo = formFieldName.split('.');
        const index = foo[1];
        const relatedFieldFullname = values["related_lists"][index].related_field_fullname;
        const options = [];
        if(relatedFieldFullname){
          const objectName = relatedFieldFullname.substring(0, relatedFieldFullname.indexOf("."))
          const object = Creator.getObject(objectName);
          _.each(object.fields, function(field){
            options.push({label: field.label, value: field.name})
          })
        }
        return options
      }
  related_lists.$.sort_field_name:
    label: Sort field
    type: lookup
    reference_to: object_fields
    create: false
    multiple: true
    depend_on:
      - object_name
      - related_lists.$.related_field_fullname
    optionsFunction: !!js/function |
      function(values) {
        if(!this.template){return [];}
        const formFieldName = this.template.data.name;
        const foo = formFieldName.split('.');
        const index = foo[1];
        const relatedFieldFullname = values["related_lists"][index].related_field_fullname;
        const options = [];
        if(relatedFieldFullname){
          const objectName = relatedFieldFullname.substring(0, relatedFieldFullname.indexOf("."))
          const object = Creator.getObject(objectName);
          _.each(object.fields, function(field){
            options.push({label: field.label, value: field.name})
          })
        }
        return options
      }
  related_lists.$.sort_order:
    label: Sort Order
    type: select
    defaultValue: asc
    options:
      - label: ASC
        value: asc
      - label: DESC
        value: desc
  related_lists.$.buttons:
    label: Buttons
    type: lookup
    is_wide: true
    depend_on:
      - object_name
      - related_lists.$.related_field_fullname
    optionsFunction: !<tag:yaml.org,2002:js/function> |-
      function (values) {
        if(!this.template){return [];}
        const formFieldName = this.template.data.name;
        const foo = formFieldName.split('.');
        const index = foo[1];
        const relatedFieldFullname = values["related_lists"][index].related_field_fullname;
        const options = [];
        if(relatedFieldFullname){
          const objectName = relatedFieldFullname.substring(0, relatedFieldFullname.indexOf("."))
          var actions = Creator.getObject(objectName).actions;
          _.each(actions, function(action){
            options.push({label: action.label, value: action.name})
          })
        }
        return options
      }
  related_lists.$.filters:
    label: Filters
    type: textarea
    is_wide: true
  related_lists.$.visible_on:
    label: Visible on
    type: textarea
  related_lists.$.pageSize:
    label: PageSize
    type: number
    defaultValue: 5
list_views:
  all:
    columns:
      - label
      - object_name
      - profiles
    label: All
    filter_scope: space
actions:
  createDefaulRecordView:
    on: list
    label: 创建默认页面布局
    visible: false
permission_set:
  user:
    allowCreate: false
    allowDelete: false
    allowEdit: false
    allowRead: false
    modifyAllRecords: false
    viewAllRecords: false
  admin:
    allowCreate: true
    allowDelete: true
    allowEdit: true
    allowRead: true
    modifyAllRecords: true
    viewAllRecords: true